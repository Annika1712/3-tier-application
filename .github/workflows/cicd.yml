name: Build 3-tier-application in eks

on:
  push:
    branches: [ "kubernetes-cicd" ]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    
    steps: 
      # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
      - name: Checkout Repository
        uses: actions/checkout@v4

      # https://github.com/marketplace/actions/docker-login#docker-hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Create and boot a builder using by default the docker-container driver. This is a recommended step by docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Build and push frontend image to Docker hub
        uses: docker/build-push-action@v6
        with:
          context: ./ui
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eks-basic3tier-frontend:latest
      
      - name: Build and push backend image to Docker hub
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/eks-basic3tier-backend:latest
      
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-region: eu-central-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Configure cluster access
        run: aws eks update-kubeconfig --region eu-central-1 --name team1-eks-cluster 
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        id: install

      - name: Apply database and backend kubernetes manifest files
        run: |
          kubectl apply -f database-clusterip.yml
          kubectl apply -f database-deployment.yml
          kubectl apply -f backend-loadbalancer.yml
          kubectl apply -f backend-deployment.yml
      
      - name: Alter configmap and apply
        run: |
          export BACKEND_HOSTNAME=$(kubectl -n annika get svc backend-lb -o jsonpath=/'{.status.loadBalancer.ingress[0].hostname}')
          envsubst < frontend-configmap.yml | kubectl apply -f -

      - name: Apply frontend kubernetes manifest files
        run: |
          kubectl apply -f frontend-loadbalancer.yml
          kubectl apply -f frontend-deployment.yml
      


